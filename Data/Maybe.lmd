# Maybe

This (simple) library is the solution to Tony Hoare's [Billion Dollar Mistake](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare).
`Maybe` can help with optional results, error handling and optional arguments.


## Definition

`Maybe` is an ADT with a collection of helper and chaining functions.

```
type Maybe a
    = Nothing
    | Just a
```

A value of type `Maybe a` either contains:

- a value of type `a` represented as `Just a`, or
- it is empty represented as `Nothing`


## Helper Functions


### <@function name="withDefault"/>

Provide a default value, turning an optional value into a normal value. This comes in handy when paired with functions
like `String.toInt` and `List.head` which gives back a `Maybe`.

~~~ +SourceFunctions
withDefault : a -> Maybe a -> a
withDefault def Nothing = def
withDefault def (Just value) = value
~~~

The implementation is declarative so the following code really provides a couple of running examples to get a feel for
how to use this function.

~~~ +withDefaultTests
Test "withDefault 100 (toInt \"42\")" <| withDefault 100 (toInt "42") == 42
~~~

~~~ +withDefaultTests
Test "withDefault 100 (toInt \"42a\")" <| withDefault 100 (toInt "42a") == 100
~~~


## Boilerplate

In order to kick off the implementation there is a need for some boilerplate code.  The first is the `Maybe` source code:

~~~ Source file="Maybe.sle"
export
  [=SourceExports separator="\n  , "]

[=SourceFunctions separator="\n\n"]
~~~

The second piece of boilerplate code is to hold all of the unit tests that are composed as part of this definition:

~~~ TestSuite file="MaybeTest.sle"
export
  suite


import file:../Test/Unit exposing Suite(..)
import file:./String exposing toInt
import file:./Maybe exposing [=SourceExports separator=", "]

suite =
  Describe "Data.Maybe"
  [ [=Tests separator="\n    , "]
  ]
~~~


<#macro function name>
${name}

~~~ +SourceExports weave=False
${name}
~~~

~~~ +Tests weave=False
Describe "${name}"
    [ [=${name}Tests separator="\n    , "]
    ]
~~~
</#macro>

<#macro test name title>
~~~ ${name}
Test "${title}" <| <#nested>
~~~
</#macro>
