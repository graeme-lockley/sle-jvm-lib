export
  foldLeft
, foldRight
, length
, map
, repeat
, reverse
, singleton
, sum


singleton : a -> List a
singleton element =
  Cons element Nil


foldLeft : (b -> a -> b) -> b -> List a -> b
foldLeft f z Nil = z
foldLeft f z (Cons x xs) = foldLeft f (f z x) xs


foldRight : (a -> b -> b) -> b -> List a -> b
foldRight f z Nil = z
foldRight f z (Cons x xs) = f x (foldRight f z xs)


reverse : List a -> List a
reverse =
  foldLeft (\xs x -> Cons x xs) []


map : (a -> b) -> List a -> List b
map f Nil =
  Nil
map f (Cons x xs) =
  Cons (f x) (map f xs)


sum : List Int -> Int
sum =
  foldLeft (\a b -> a + b) 0


length : List a -> Int
length Nil = 0
length (Cons x xs) = 1 + length xs


repeat : a -> Int -> List a
repeat e 0 = Nil
repeat e n = Cons e (repeat e (n - 1))
