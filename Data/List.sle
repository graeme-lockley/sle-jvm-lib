export
  foldLeft
, foldRight
, reverse
, singleton


singleton : a -> List a
singleton element =
  Cons element Nil


foldLeft : (b -> a -> b) -> b -> List a -> b
foldLeft f z Nil = z
foldLeft f z (Cons x xs) = foldLeft f (f z x) xs


foldRight : (a -> b -> b) -> b -> List a -> b
foldRight f z Nil = z
foldRight f z (Cons x xs) = f x (foldRight f z xs)


reverse : List a -> List a
reverse =
  foldLeft (\xs x -> Cons x xs) []
